// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.2
// - protoc             v5.28.3
// source: gateway/seminar/v1/seminar.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationSeminarAddMCPServer = "/Ayana.v1.Seminar/AddMCPServer"
const OperationSeminarCheckMCPServerHealth = "/Ayana.v1.Seminar/CheckMCPServerHealth"
const OperationSeminarCreateTopic = "/Ayana.v1.Seminar/CreateTopic"
const OperationSeminarDeleteTopic = "/Ayana.v1.Seminar/DeleteTopic"
const OperationSeminarGetDocuments = "/Ayana.v1.Seminar/GetDocuments"
const OperationSeminarGetMCPServers = "/Ayana.v1.Seminar/GetMCPServers"
const OperationSeminarGetTopic = "/Ayana.v1.Seminar/GetTopic"
const OperationSeminarGetTopicsMetadata = "/Ayana.v1.Seminar/GetTopicsMetadata"
const OperationSeminarStopTopic = "/Ayana.v1.Seminar/StopTopic"

type SeminarHTTPServer interface {
	AddMCPServer(context.Context, *AddMCPServerReqeust) (*AddMCPServerReply, error)
	CheckMCPServerHealth(context.Context, *CheckMCPServerHealthReqeust) (*CheckMCPServerHealthReply, error)
	CreateTopic(context.Context, *CreateTopicRequest) (*CreateTopicReply, error)
	DeleteTopic(context.Context, *DeleteTopicRequest) (*DeleteTopicReply, error)
	GetDocuments(context.Context, *GetDocumentsRequest) (*GetDocumentsReply, error)
	GetMCPServers(context.Context, *GetMCPServersRequest) (*GetMCPServersReply, error)
	// GetTopic 获取讨论主题的详细信息，进入讨论时加载
	GetTopic(context.Context, *GetTopicRequest) (*GetTopicReply, error)
	// GetTopicsMetadata 获取用户所有讨论主题的元信息，用于前端展示
	GetTopicsMetadata(context.Context, *GetTopicsMetadataRequest) (*GetTopicsMetadataReply, error)
	StopTopic(context.Context, *StopTopicRequest) (*StopTopicReply, error)
}

func RegisterSeminarHTTPServer(s *http.Server, srv SeminarHTTPServer) {
	r := s.Route("/")
	r.POST("/seminar/topic/creating", _Seminar_CreateTopic0_HTTP_Handler(srv))
	r.POST("/seminar/topic/metadata", _Seminar_GetTopicsMetadata0_HTTP_Handler(srv))
	r.POST("/seminar/topic/getting", _Seminar_GetTopic0_HTTP_Handler(srv))
	r.POST("/seminar/topic/deleting", _Seminar_DeleteTopic0_HTTP_Handler(srv))
	r.POST("/seminar/topic/stopping", _Seminar_StopTopic0_HTTP_Handler(srv))
	r.POST("/seminar/document/getting", _Seminar_GetDocuments0_HTTP_Handler(srv))
	r.POST("/seminar/mcp/add", _Seminar_AddMCPServer0_HTTP_Handler(srv))
	r.POST("/seminar/mcp/getting", _Seminar_GetMCPServers0_HTTP_Handler(srv))
	r.POST("/seminar/mcp/health", _Seminar_CheckMCPServerHealth0_HTTP_Handler(srv))
}

func _Seminar_CreateTopic0_HTTP_Handler(srv SeminarHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateTopicRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSeminarCreateTopic)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateTopic(ctx, req.(*CreateTopicRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateTopicReply)
		return ctx.Result(200, reply)
	}
}

func _Seminar_GetTopicsMetadata0_HTTP_Handler(srv SeminarHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetTopicsMetadataRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSeminarGetTopicsMetadata)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTopicsMetadata(ctx, req.(*GetTopicsMetadataRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetTopicsMetadataReply)
		return ctx.Result(200, reply)
	}
}

func _Seminar_GetTopic0_HTTP_Handler(srv SeminarHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetTopicRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSeminarGetTopic)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTopic(ctx, req.(*GetTopicRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetTopicReply)
		return ctx.Result(200, reply)
	}
}

func _Seminar_DeleteTopic0_HTTP_Handler(srv SeminarHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteTopicRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSeminarDeleteTopic)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteTopic(ctx, req.(*DeleteTopicRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteTopicReply)
		return ctx.Result(200, reply)
	}
}

func _Seminar_StopTopic0_HTTP_Handler(srv SeminarHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in StopTopicRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSeminarStopTopic)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.StopTopic(ctx, req.(*StopTopicRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*StopTopicReply)
		return ctx.Result(200, reply)
	}
}

func _Seminar_GetDocuments0_HTTP_Handler(srv SeminarHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDocumentsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSeminarGetDocuments)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDocuments(ctx, req.(*GetDocumentsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetDocumentsReply)
		return ctx.Result(200, reply)
	}
}

func _Seminar_AddMCPServer0_HTTP_Handler(srv SeminarHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddMCPServerReqeust
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSeminarAddMCPServer)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddMCPServer(ctx, req.(*AddMCPServerReqeust))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddMCPServerReply)
		return ctx.Result(200, reply)
	}
}

func _Seminar_GetMCPServers0_HTTP_Handler(srv SeminarHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetMCPServersRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSeminarGetMCPServers)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetMCPServers(ctx, req.(*GetMCPServersRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetMCPServersReply)
		return ctx.Result(200, reply)
	}
}

func _Seminar_CheckMCPServerHealth0_HTTP_Handler(srv SeminarHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CheckMCPServerHealthReqeust
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSeminarCheckMCPServerHealth)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CheckMCPServerHealth(ctx, req.(*CheckMCPServerHealthReqeust))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CheckMCPServerHealthReply)
		return ctx.Result(200, reply)
	}
}

type SeminarHTTPClient interface {
	AddMCPServer(ctx context.Context, req *AddMCPServerReqeust, opts ...http.CallOption) (rsp *AddMCPServerReply, err error)
	CheckMCPServerHealth(ctx context.Context, req *CheckMCPServerHealthReqeust, opts ...http.CallOption) (rsp *CheckMCPServerHealthReply, err error)
	CreateTopic(ctx context.Context, req *CreateTopicRequest, opts ...http.CallOption) (rsp *CreateTopicReply, err error)
	DeleteTopic(ctx context.Context, req *DeleteTopicRequest, opts ...http.CallOption) (rsp *DeleteTopicReply, err error)
	GetDocuments(ctx context.Context, req *GetDocumentsRequest, opts ...http.CallOption) (rsp *GetDocumentsReply, err error)
	GetMCPServers(ctx context.Context, req *GetMCPServersRequest, opts ...http.CallOption) (rsp *GetMCPServersReply, err error)
	GetTopic(ctx context.Context, req *GetTopicRequest, opts ...http.CallOption) (rsp *GetTopicReply, err error)
	GetTopicsMetadata(ctx context.Context, req *GetTopicsMetadataRequest, opts ...http.CallOption) (rsp *GetTopicsMetadataReply, err error)
	StopTopic(ctx context.Context, req *StopTopicRequest, opts ...http.CallOption) (rsp *StopTopicReply, err error)
}

type SeminarHTTPClientImpl struct {
	cc *http.Client
}

func NewSeminarHTTPClient(client *http.Client) SeminarHTTPClient {
	return &SeminarHTTPClientImpl{client}
}

func (c *SeminarHTTPClientImpl) AddMCPServer(ctx context.Context, in *AddMCPServerReqeust, opts ...http.CallOption) (*AddMCPServerReply, error) {
	var out AddMCPServerReply
	pattern := "/seminar/mcp/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSeminarAddMCPServer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SeminarHTTPClientImpl) CheckMCPServerHealth(ctx context.Context, in *CheckMCPServerHealthReqeust, opts ...http.CallOption) (*CheckMCPServerHealthReply, error) {
	var out CheckMCPServerHealthReply
	pattern := "/seminar/mcp/health"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSeminarCheckMCPServerHealth))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SeminarHTTPClientImpl) CreateTopic(ctx context.Context, in *CreateTopicRequest, opts ...http.CallOption) (*CreateTopicReply, error) {
	var out CreateTopicReply
	pattern := "/seminar/topic/creating"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSeminarCreateTopic))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SeminarHTTPClientImpl) DeleteTopic(ctx context.Context, in *DeleteTopicRequest, opts ...http.CallOption) (*DeleteTopicReply, error) {
	var out DeleteTopicReply
	pattern := "/seminar/topic/deleting"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSeminarDeleteTopic))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SeminarHTTPClientImpl) GetDocuments(ctx context.Context, in *GetDocumentsRequest, opts ...http.CallOption) (*GetDocumentsReply, error) {
	var out GetDocumentsReply
	pattern := "/seminar/document/getting"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSeminarGetDocuments))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SeminarHTTPClientImpl) GetMCPServers(ctx context.Context, in *GetMCPServersRequest, opts ...http.CallOption) (*GetMCPServersReply, error) {
	var out GetMCPServersReply
	pattern := "/seminar/mcp/getting"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSeminarGetMCPServers))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SeminarHTTPClientImpl) GetTopic(ctx context.Context, in *GetTopicRequest, opts ...http.CallOption) (*GetTopicReply, error) {
	var out GetTopicReply
	pattern := "/seminar/topic/getting"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSeminarGetTopic))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SeminarHTTPClientImpl) GetTopicsMetadata(ctx context.Context, in *GetTopicsMetadataRequest, opts ...http.CallOption) (*GetTopicsMetadataReply, error) {
	var out GetTopicsMetadataReply
	pattern := "/seminar/topic/metadata"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSeminarGetTopicsMetadata))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SeminarHTTPClientImpl) StopTopic(ctx context.Context, in *StopTopicRequest, opts ...http.CallOption) (*StopTopicReply, error) {
	var out StopTopicReply
	pattern := "/seminar/topic/stopping"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSeminarStopTopic))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
