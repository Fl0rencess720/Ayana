// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.2
// - protoc             v5.28.3
// source: gateway/seminar/v1/seminar.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationSeminarCreateTopic = "/Wittgenstein.v1.Seminar/CreateTopic"
const OperationSeminarDeleteTopic = "/Wittgenstein.v1.Seminar/DeleteTopic"
const OperationSeminarStartTopic = "/Wittgenstein.v1.Seminar/StartTopic"

type SeminarHTTPServer interface {
	CreateTopic(context.Context, *CreateTopicRequest) (*CreateTopicReply, error)
	DeleteTopic(context.Context, *DeleteTopicRequest) (*DeleteTopicReply, error)
	StartTopic(context.Context, *StartTopicRequest) (*StartTopicReply, error)
}

func RegisterSeminarHTTPServer(s *http.Server, srv SeminarHTTPServer) {
	r := s.Route("/")
	r.POST("/seminar/topic/creating", _Seminar_CreateTopic0_HTTP_Handler(srv))
	r.POST("/seminar/topic/deleting", _Seminar_DeleteTopic0_HTTP_Handler(srv))
	r.POST("/seminar/topic/starting", _Seminar_StartTopic0_HTTP_Handler(srv))
}

func _Seminar_CreateTopic0_HTTP_Handler(srv SeminarHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateTopicRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSeminarCreateTopic)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateTopic(ctx, req.(*CreateTopicRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateTopicReply)
		return ctx.Result(200, reply)
	}
}

func _Seminar_DeleteTopic0_HTTP_Handler(srv SeminarHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteTopicRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSeminarDeleteTopic)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteTopic(ctx, req.(*DeleteTopicRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteTopicReply)
		return ctx.Result(200, reply)
	}
}

func _Seminar_StartTopic0_HTTP_Handler(srv SeminarHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in StartTopicRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSeminarStartTopic)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.StartTopic(ctx, req.(*StartTopicRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*StartTopicReply)
		return ctx.Result(200, reply)
	}
}

type SeminarHTTPClient interface {
	CreateTopic(ctx context.Context, req *CreateTopicRequest, opts ...http.CallOption) (rsp *CreateTopicReply, err error)
	DeleteTopic(ctx context.Context, req *DeleteTopicRequest, opts ...http.CallOption) (rsp *DeleteTopicReply, err error)
	StartTopic(ctx context.Context, req *StartTopicRequest, opts ...http.CallOption) (rsp *StartTopicReply, err error)
}

type SeminarHTTPClientImpl struct {
	cc *http.Client
}

func NewSeminarHTTPClient(client *http.Client) SeminarHTTPClient {
	return &SeminarHTTPClientImpl{client}
}

func (c *SeminarHTTPClientImpl) CreateTopic(ctx context.Context, in *CreateTopicRequest, opts ...http.CallOption) (*CreateTopicReply, error) {
	var out CreateTopicReply
	pattern := "/seminar/topic/creating"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSeminarCreateTopic))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SeminarHTTPClientImpl) DeleteTopic(ctx context.Context, in *DeleteTopicRequest, opts ...http.CallOption) (*DeleteTopicReply, error) {
	var out DeleteTopicReply
	pattern := "/seminar/topic/deleting"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSeminarDeleteTopic))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SeminarHTTPClientImpl) StartTopic(ctx context.Context, in *StartTopicRequest, opts ...http.CallOption) (*StartTopicReply, error) {
	var out StartTopicReply
	pattern := "/seminar/topic/starting"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSeminarStartTopic))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
