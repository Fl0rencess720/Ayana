// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.2
// - protoc             v5.28.3
// source: gateway/role/v1/role.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationRoleManagerCreateRole = "/Wittgenstein.v1.RoleManager/CreateRole"
const OperationRoleManagerDeleteRole = "/Wittgenstein.v1.RoleManager/DeleteRole"
const OperationRoleManagerGetAvailableModels = "/Wittgenstein.v1.RoleManager/GetAvailableModels"
const OperationRoleManagerGetRoles = "/Wittgenstein.v1.RoleManager/GetRoles"
const OperationRoleManagerSetRole = "/Wittgenstein.v1.RoleManager/SetRole"

type RoleManagerHTTPServer interface {
	CreateRole(context.Context, *CreateRoleRequest) (*CreateRoleReply, error)
	DeleteRole(context.Context, *DeleteRoleRequest) (*DeleteRoleReply, error)
	GetAvailableModels(context.Context, *GetAvailableModelsRequest) (*GetAvailableModelsReply, error)
	GetRoles(context.Context, *GetRolesRequest) (*GetRolesReply, error)
	SetRole(context.Context, *SetRoleRequest) (*SetRoleReply, error)
}

func RegisterRoleManagerHTTPServer(s *http.Server, srv RoleManagerHTTPServer) {
	r := s.Route("/")
	r.POST("/role/creating", _RoleManager_CreateRole0_HTTP_Handler(srv))
	r.POST("/role/deleting", _RoleManager_DeleteRole0_HTTP_Handler(srv))
	r.POST("/role/getting", _RoleManager_GetRoles0_HTTP_Handler(srv))
	r.POST("/role/model/getting", _RoleManager_GetAvailableModels0_HTTP_Handler(srv))
	r.POST("/role/setting", _RoleManager_SetRole0_HTTP_Handler(srv))
}

func _RoleManager_CreateRole0_HTTP_Handler(srv RoleManagerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateRoleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoleManagerCreateRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateRole(ctx, req.(*CreateRoleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateRoleReply)
		return ctx.Result(200, reply)
	}
}

func _RoleManager_DeleteRole0_HTTP_Handler(srv RoleManagerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteRoleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoleManagerDeleteRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteRole(ctx, req.(*DeleteRoleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteRoleReply)
		return ctx.Result(200, reply)
	}
}

func _RoleManager_GetRoles0_HTTP_Handler(srv RoleManagerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetRolesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoleManagerGetRoles)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetRoles(ctx, req.(*GetRolesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetRolesReply)
		return ctx.Result(200, reply)
	}
}

func _RoleManager_GetAvailableModels0_HTTP_Handler(srv RoleManagerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAvailableModelsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoleManagerGetAvailableModels)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAvailableModels(ctx, req.(*GetAvailableModelsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetAvailableModelsReply)
		return ctx.Result(200, reply)
	}
}

func _RoleManager_SetRole0_HTTP_Handler(srv RoleManagerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetRoleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoleManagerSetRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetRole(ctx, req.(*SetRoleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SetRoleReply)
		return ctx.Result(200, reply)
	}
}

type RoleManagerHTTPClient interface {
	CreateRole(ctx context.Context, req *CreateRoleRequest, opts ...http.CallOption) (rsp *CreateRoleReply, err error)
	DeleteRole(ctx context.Context, req *DeleteRoleRequest, opts ...http.CallOption) (rsp *DeleteRoleReply, err error)
	GetAvailableModels(ctx context.Context, req *GetAvailableModelsRequest, opts ...http.CallOption) (rsp *GetAvailableModelsReply, err error)
	GetRoles(ctx context.Context, req *GetRolesRequest, opts ...http.CallOption) (rsp *GetRolesReply, err error)
	SetRole(ctx context.Context, req *SetRoleRequest, opts ...http.CallOption) (rsp *SetRoleReply, err error)
}

type RoleManagerHTTPClientImpl struct {
	cc *http.Client
}

func NewRoleManagerHTTPClient(client *http.Client) RoleManagerHTTPClient {
	return &RoleManagerHTTPClientImpl{client}
}

func (c *RoleManagerHTTPClientImpl) CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...http.CallOption) (*CreateRoleReply, error) {
	var out CreateRoleReply
	pattern := "/role/creating"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRoleManagerCreateRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RoleManagerHTTPClientImpl) DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...http.CallOption) (*DeleteRoleReply, error) {
	var out DeleteRoleReply
	pattern := "/role/deleting"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRoleManagerDeleteRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RoleManagerHTTPClientImpl) GetAvailableModels(ctx context.Context, in *GetAvailableModelsRequest, opts ...http.CallOption) (*GetAvailableModelsReply, error) {
	var out GetAvailableModelsReply
	pattern := "/role/model/getting"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRoleManagerGetAvailableModels))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RoleManagerHTTPClientImpl) GetRoles(ctx context.Context, in *GetRolesRequest, opts ...http.CallOption) (*GetRolesReply, error) {
	var out GetRolesReply
	pattern := "/role/getting"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRoleManagerGetRoles))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RoleManagerHTTPClientImpl) SetRole(ctx context.Context, in *SetRoleRequest, opts ...http.CallOption) (*SetRoleReply, error) {
	var out SetRoleReply
	pattern := "/role/setting"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRoleManagerSetRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
