// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: gateway/role/v1/role.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RoleManager_CreateRole_FullMethodName = "/Wittgenstein.v1.RoleManager/CreateRole"
	RoleManager_DeleteRole_FullMethodName = "/Wittgenstein.v1.RoleManager/DeleteRole"
	RoleManager_CallRole_FullMethodName   = "/Wittgenstein.v1.RoleManager/CallRole"
)

// RoleManagerClient is the client API for RoleManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoleManagerClient interface {
	CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*CreateRoleReply, error)
	DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*DeleteRoleReply, error)
	CallRole(ctx context.Context, in *CallRoleRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CallRoleReply], error)
}

type roleManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewRoleManagerClient(cc grpc.ClientConnInterface) RoleManagerClient {
	return &roleManagerClient{cc}
}

func (c *roleManagerClient) CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*CreateRoleReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRoleReply)
	err := c.cc.Invoke(ctx, RoleManager_CreateRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleManagerClient) DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*DeleteRoleReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRoleReply)
	err := c.cc.Invoke(ctx, RoleManager_DeleteRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleManagerClient) CallRole(ctx context.Context, in *CallRoleRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CallRoleReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RoleManager_ServiceDesc.Streams[0], RoleManager_CallRole_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[CallRoleRequest, CallRoleReply]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RoleManager_CallRoleClient = grpc.ServerStreamingClient[CallRoleReply]

// RoleManagerServer is the server API for RoleManager service.
// All implementations must embed UnimplementedRoleManagerServer
// for forward compatibility.
type RoleManagerServer interface {
	CreateRole(context.Context, *CreateRoleRequest) (*CreateRoleReply, error)
	DeleteRole(context.Context, *DeleteRoleRequest) (*DeleteRoleReply, error)
	CallRole(*CallRoleRequest, grpc.ServerStreamingServer[CallRoleReply]) error
	mustEmbedUnimplementedRoleManagerServer()
}

// UnimplementedRoleManagerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRoleManagerServer struct{}

func (UnimplementedRoleManagerServer) CreateRole(context.Context, *CreateRoleRequest) (*CreateRoleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedRoleManagerServer) DeleteRole(context.Context, *DeleteRoleRequest) (*DeleteRoleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedRoleManagerServer) CallRole(*CallRoleRequest, grpc.ServerStreamingServer[CallRoleReply]) error {
	return status.Errorf(codes.Unimplemented, "method CallRole not implemented")
}
func (UnimplementedRoleManagerServer) mustEmbedUnimplementedRoleManagerServer() {}
func (UnimplementedRoleManagerServer) testEmbeddedByValue()                     {}

// UnsafeRoleManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoleManagerServer will
// result in compilation errors.
type UnsafeRoleManagerServer interface {
	mustEmbedUnimplementedRoleManagerServer()
}

func RegisterRoleManagerServer(s grpc.ServiceRegistrar, srv RoleManagerServer) {
	// If the following call pancis, it indicates UnimplementedRoleManagerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RoleManager_ServiceDesc, srv)
}

func _RoleManager_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleManagerServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleManager_CreateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleManagerServer).CreateRole(ctx, req.(*CreateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleManager_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleManagerServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleManager_DeleteRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleManagerServer).DeleteRole(ctx, req.(*DeleteRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleManager_CallRole_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CallRoleRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RoleManagerServer).CallRole(m, &grpc.GenericServerStream[CallRoleRequest, CallRoleReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RoleManager_CallRoleServer = grpc.ServerStreamingServer[CallRoleReply]

// RoleManager_ServiceDesc is the grpc.ServiceDesc for RoleManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoleManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Wittgenstein.v1.RoleManager",
	HandlerType: (*RoleManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRole",
			Handler:    _RoleManager_CreateRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _RoleManager_DeleteRole_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CallRole",
			Handler:       _RoleManager_CallRole_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "gateway/role/v1/role.proto",
}
