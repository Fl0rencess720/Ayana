// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/Fl0rencess720/Wittgenstein/app/service/seminar/internal/biz"
	"github.com/Fl0rencess720/Wittgenstein/app/service/seminar/internal/conf"
	"github.com/Fl0rencess720/Wittgenstein/app/service/seminar/internal/data"
	"github.com/Fl0rencess720/Wittgenstein/app/service/seminar/internal/server"
	"github.com/Fl0rencess720/Wittgenstein/app/service/seminar/internal/service"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confService *conf.Service, confData *conf.Data, registry *conf.Registry, logger log.Logger) (*kratos.App, func(), error) {
	db := data.NewMysql(confData)
	client := data.NewRedis(confData)
	discovery := server.NewDiscovery(registry)
	roleManagerClient := data.NewRoleServiceClient(confService, discovery)
	embedder := data.NewEmbedder(confData)
	retriever := data.NewRetriever(client, embedder)
	dataData, cleanup, err := data.NewData(confData, logger, db, client, roleManagerClient, embedder, retriever)
	if err != nil {
		return nil, nil, err
	}
	seminarRepo := data.NewSeminarRepo(dataData, logger)
	topicCache := biz.NewTopicCache()
	roleCache := biz.NewRoleCache()
	seminarUsecase := biz.NewSeminarUsecase(seminarRepo, topicCache, roleCache, roleManagerClient, logger)
	ragRepo := data.NewRAGRepo(dataData, logger)
	ragUsecase := biz.NewRAGUsecase(ragRepo, logger)
	seminarService := service.NewSeminarService(seminarUsecase, ragUsecase)
	grpcServer := server.NewGRPCServer(confServer, seminarService, logger)
	registrar := server.NewRegistrar(registry)
	app := newApp(logger, grpcServer, registrar)
	return app, func() {
		cleanup()
	}, nil
}
