services:
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger_server
    restart: always
    ports:
      - "16686:16686"
      - "4317:4317"
      - "4318:4318"
    environment:
      - LOG_LEVEL=debug
      - JAEGER_AGENT_MAX_PACKET_SIZE=65000
    networks:
      - ayana_network
  consul:
    image: hashicorp/consul 
    container_name: consul
    restart: always
    ports:
      - "8300:8300"
      - "8301:8301"
      - "8302:8302"
      - "8500:8500"
      - "8600:8600"
    networks:
      - ayana_network
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    env_file:
      - .env 
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}  
    volumes:
      -  redis_data:/data
    networks:
      - ayana_network
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
  mysql:
    image: mysql:latest
    container_name: mysql
    restart: always
    ports:
      - "3306:3306"
    env_file:
      - .env
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_DATABASE: ayana
      TZ: Asia/Shanghai
    volumes:
      - mysql_data:/var/lib/mysql
      - mysql_conf:/etc/mysql/conf.d
      - mysql_logs:/var/log/mysql
    networks:
      - ayana_network
    command: [
      "--character-set-server=utf8mb4",
      "--collation-server=utf8mb4_unicode_ci",
      "--host-cache-size=0",  
    ]
  kafka:
    image: 'bitnami/kafka:4.0.0'
    container_name: kafka
    restart: always
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    environment:
      - TZ=Asia/Shanghai
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    networks:
      - ayana_network
    ports:
      - '9092:9092'
      - '9094:9094'
    volumes:
      - kafka_data:/bitnami
    
  etcd:
    container_name: milvus-etcd
    image: quay.io/coreos/etcd:v3.5.18
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - etcd_data:/etcd
    command: etcd -advertise-client-urls=http://etcd:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - milvus

  minio:
    container_name: milvus-minio
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    ports:
      - "9011:9001" 
      - "9010:9000" 
    volumes:
      - minio_data:/minio_data
    command: minio server /minio_data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - milvus

  standalone:
    container_name: milvus-standalone
    image: milvusdb/milvus:v2.5.10
    command: ["milvus", "run", "standalone"]
    security_opt:
    - seccomp:unconfined
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000  
    volumes:
      - milvus_data:/var/lib/milvus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      start_period: 90s
      timeout: 20s
      retries: 3
    ports:
      - "19530:19530"
      - "9091:9091"
    depends_on:
      - "etcd"
      - "minio"
    networks:
      - milvus
      - ayana_network

  ayana-geteway:
    container_name: ayana-getway
    build: ../app/gateway/interface
    env_file:
      - .env
    networks:
      - ayana_network
    working_dir: /app
    ports:
      - "8000:8000"
      

  ayana-service-user:
    container_name: ayana-service-user
    build: ../app/service/user
    env_file:
      - .env
    networks:
      - ayana_network
    working_dir: /app
    
  ayana-service-role:
    container_name: ayana-service-role
    build: ../app/serivce/role
    env_file:
      - .env
    networks:
      - ayana_network
    working_dir: /app
    
  ayana-service-seminar:
    container_name: ayana-service-seminar
    build: ../app/seminar
    env_file:
      - .env
    networks:
      - ayana_network

networks:
  ayana_network:
    driver: bridge
  milvus:
    driver: bridge

volumes:
  mysql_data:
  mysql_conf:
  milvus_data:
  etcd_data:
  minio_data:
  kafka_data:
  redis_data: